import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

export async function POST(request: NextRequest) {
  try {
    const { screenshot, clothingType } = await request.json();
 
    if (!screenshot || !clothingType) {
      return NextResponse.json(
        { error: 'Missing required fields: screenshot and clothingType' },
        { status: 400 }
      );
    }

    // Get Gemini API key from environment
    const geminiApiKey = process.env.GEMINI_API_KEY;
    
    if (!geminiApiKey) {
      console.warn('Gemini API key not configured');
      return NextResponse.json({
        success: false,
        error: 'GEMINI_API_KEY not configured',
        image: screenshot,
        note: 'Configure GEMINI_API_KEY environment variable'
      }, { status: 400 });
    }

    try {
      // Use the official Google Generative AI SDK
      const genAI = new GoogleGenerativeAI(geminiApiKey);
      const model = genAI.getGenerativeModel({ model: "imagen-4.0-fast-generate-001" });

      const prompt = `Create a photorealistic image of a person wearing this ${clothingType} design. The person should be facing forward, from knee to head, in normal lighting conditions. The image should be high quality and realistic, showing the clothing design clearly. Use the design elements from the provided image.`;

      const result = await model.generateContent([
        prompt,
        {
          inlineData: {
            data: screenshot,
            mimeType: "image/png"
          }
        }
      ]);

      const response = await result.response;
      const imageData = response.candidates?.[0]?.content?.parts?.find(part => part.inlineData)?.inlineData?.data;
      
      if (!imageData) {
        console.error('No image found in Gemini response');
        throw new Error('No image generated by Gemini');
      }

      console.log('Gemini generated image successfully');
      
      return NextResponse.json({
        success: true,
        image: imageData,
        note: 'Image generated using Gemini 2.5 Flash Image'
      });
    } catch (error) {
      console.error('Gemini API failed with error:', error);
      console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');
      
      // Check if it's a quota error and provide helpful fallback
      if (error instanceof Error && error.message.includes('quota')) {
        console.warn('Gemini API quota exceeded, using fallback with original screenshot');
        return NextResponse.json({
          success: true,
          image: screenshot,
          analysis: 'Mock analysis: Design contains various elements on clothing',
          note: 'Using fallback - Gemini API quota exceeded. The original design screenshot is being used instead of AI-generated image.'
        });
      }
      
      // For other errors, still provide fallback but with error info
      console.warn('Gemini API failed, using fallback with original screenshot');
      return NextResponse.json({
        success: true,
        image: screenshot,
        analysis: 'Mock analysis: Design contains various elements on clothing',
        note: `Using fallback - Gemini API error: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }

  } catch (error) {
    console.error('Error generating image:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
